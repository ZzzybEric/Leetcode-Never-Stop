//求二叉树的深度，本质上是后序遍历(DFS),深度优先搜索

class Solution {
    public int maxDepth(TreeNode root) {
        if(root == null){
            return 0;
        }
        return Math.max(maxDepth(root.left),maxDepth(root.right))+1;
    }
}

//方法二，采用层序遍历(BFS),广度优先搜索
 public int maxDepth(TreeNode root) {
      if (root == null) return 0;
      Queue<TreeNode> queue = new LinkedList<>();
      queue.add(root);
      int res = 0;
      while (!queue.isEmpty()) {
          res++;
          int n = queue.size();
          for (int i = 0; i < n; i++) {
              TreeNode node = queue.poll();
              if (node.left != null) queue.add(node.left);
              if (node.right != null) queue.add(node.right);
           }
      }
      return res;
 }
